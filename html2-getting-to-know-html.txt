https://learn.shayhowe.com/html-css/getting-to-know-html/

Semantics within HTML is the practice of giving content on the page meaning and structure by using the proper element.
Semantic code describes the value of content on a page, regardless of the style or appearance of that content.
There are several benefits to using semantic elements, including enabling computers, screen readers, search engines, and other devices to adequately read and understand the content on a web page.

Divisions, or <div>s, and <span>s are HTML elements that act as containers solely for styling purposes. 
As generic containers, they do not come with any overarching meaning or semantic value. 
Both <div>s and <span>s, however, are extremely valuable when building a website in that they give us the ability to apply targeted styles to a contained set of content.
A <div> is a block-level element that is commonly used to identify large groupings of content, and which helps to build a web page’s layout and design.
A <span>, on the other hand, is an inline-level element commonly used to identify smaller groupings of text within a block-level element.

Block-level elements begin on a new line, stacking one on top of the other, and occupy any available width. Block-level elements may be nested inside one another and may wrap inline-level elements. We’ll most commonly see block-level elements used for larger pieces of content, such as paragraphs.
Block (can take width and height)
>Newline is inserted before and after, e.g., it "takes up" whole width

Inline-level elements do not begin on a new line. They fall into the normal flow of a document, lining up one after the other, and only maintain the width of their content. Inline-level elements may be nested inside one another; however, they cannot wrap block-level elements. We’ll usually see inline-level elements with smaller pieces of content, such as a few words.
Inline (can not take width and height)
>Only uses as much space as needed to contain the element.

We’ll commonly see <div>s and <span>s with class or id attributes for styling purposes.
Choosing a class or id attribute value, or name, requires a bit of care. We want to choose a value that refers to the content of an element, not necessarily the appearance of an element.

<!-- Division -->
<div class="social">
  <p>I may be found on...</p>
  <p>Additionally, I have a profile on...</p>
</div>

<!-- Span -->
<p>Soon we'll be <span class="tooltip">writing HTML</span> with the best of them.</p>








Cheat Sheet
https://www.wpkube.com/html5-cheat-sheet/

Images
<img 
  src="logo.jpg" - image filename
  alt="company logo" - info for screen readers, broken links
  title="image title" - displays on hover
  class="thumbnail" - extra formatting (height, width, position, etc.)
/>
Note: always include alt attribute for images. If no alternative text, just leave null (i.e., alt="")
https://www.w3.org/WAI/tutorials/images/decision-tree/
Every image requires an HTTP request
Every image must be downloaded, so size can be a factor (pixel size)
Use Attributes to modify <img> tag width and height 
>width="500px" - hardcode
>width="50%" - preferred for relative image size (i.e., scales with browser window resize)

Favicons
Image/logo/icon next to the title of your page in the browser tab
Must go in the <head> section
Must be .png or special icon image
<link rel="icon" type="image/png" href="logo.png" />

Figures
More semantics than <img>
<figure>
  <img src="logo.jpg" alt="company logo">
  <figcaption>caption of the image</figcaption>
</figure>
  
Special Entities
< - &lt;
> - &gt;
copywrite symbol - &copy;
blank space - &nbsp;
cent symbol - &cent;
& - &amp;

Divs almost always had special classes/ids associated with them
Div tags are being phased out due to more specialized semantic tags
<div class="header">...</div>
<div class="section">...</div>
<div class="footer">...</div>

<header>
A group of introductory or navigational aids: title, navigation links, etc.
Note: <header> is not the same as <head>
<header> tags are often referenced by screen readers
<header>
  <h1>this is the title</h1>
  <h2>the author is shawn</h2>
</header>

<nav>
A section of the page that links to other pages or to parts within the page or site.
Often found in the <header> tag.
<nav>
  <ul>
    <li><a href="#overview">Overview</a></li>
  </ul>
</nav>

<footer>
A section that contains info such as copyright data, related documents, and links to social media
<footer>
  &copy;2021 by Shawn Kerrigan<br>
  <a href="http://www.smarterindustrial.com">Smarter Industrial</a>
</footer>
  
Icons  
https://fontawesome.com/
<a href="http://www.facebook.com" aria-label="Facebook"><i class="fab fa-facebook"></i></a>
Use aria-label to properly label icons for screen readers

Hyperlinks
Links are called anchor links hence <a> tag
Types of links:
Absolute - full url (use when linking to external page)
Relative - link to file relative to current folder
Internal - can also link to a different location in the same file by using # (e.g., #section)
Graphical

Anchors can take a target attribute (i.e., how it opens in browswer)
_self - default action (same browser tab)
_blank - open in new tab or window
<a href="http://www.facebook.com" target="_blank" rel="noopener" aria-label="Facebook" title="Facebook"><i class="fab fa-facebook"></i></a>
rel="noopener" is added for security purposes

Multimedia
HTML5 designed to work without having to download any extra plugins (e.g., quicktime or flash)
<video> tag uses a src attribute
>Common attributes: height, width, autoplay, loop, controls
*note avoid using autoplay and loop unless absolutely necessary to avoid consuming user bandwidth
Make sure to provide links to plugins in case browser doesn't support tags
Include text descriptions and closed captioning
<video src="mov.mp3" width="400" controls loop>Your browser does not support the <code>video</code> element.</video>
>note: just having controls attribute means attribute = true
<audio> very similar to video
>Common attributes: autoplay, loop, controls, buffered, muted, volume
>you can set both the video and audio elements to play clips by adding to the src attribute 
(e.g., .ext#t=42 - start at 42 sec and play from there, .ext#t=5,25 - play from 5 to 25 sec, .ext#t=,1:38:45, .ext#t=,39 - play first 39 sec)

Tables
Only use tables is you are displaying data
Design table first prior to coding
<table> tag - container
<tr>...</tr> - rows
<td>...</td> - columns (cells)
<th>...</th> - headings
<table>
  <tr><th>Column1</th><th>Column2</th><th>Column3</th></tr>
  <tr><td>One</td><td>Two</td><td>Three</td></tr>
  <tr><td>Four</td><td>Five</td><td>Six</td></tr>
  <tr><td>Seven</td><td>Eight</td><td>Nine</td></tr>
  <tr><td rowspan="3">Ten</td></tr>
</table>
you can combine multiple rows or columns using rowspan and colspan attributes

<caption>
Link text to a table

Useful Tags
Generic: <p>, <div>
Semantic: <header>, <nav>, <footer>, <figure>
Block Tags
<hr> - hard rule - line across page
Inline Tags
<span> - generic, <time> - relates to time (e.g., 9:00am or new year's day), <code> - coding language, <sub> - subscript, <sup> - superscript

Accessibility
Visual Disabilities - blindness (screen readers), low-vision (glasses), color-blindness
>font-size, color-contrast, font-style
Hearing Disabilities - partial to total deafness
>closed captioning
Motor Disabilities - inability to use a mouse or physical keyboard, slow response time, limited fine motor control
>tab through page
Cognitive Disabilities - learning disabilities, distractibility, dyslexia, inability to remember or focus

Four principles of successful web design
W3C WCAG 2.0 Accessibility Guidelines
POUR: Perceivable, Operable, Understandable, Robust
Design with accessibility in mind
>Adhere to standards (semantics behind HTML tags)
https://wave.webaim.org/
http://html5accessibility.com/
Funkify disabilty simulator (chrome extension)


